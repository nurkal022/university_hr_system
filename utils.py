import json
import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from datetime import datetime
from werkzeug.utils import secure_filename
from flask import request, current_app
from models import AuditLog, db
from email_config import get_email_config

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫
APPLICATION_STATUSES = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    'hr_review': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ HR',
    'revision_requested': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞',
    'dept_review': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –≥–ª–∞–≤—ã –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞',
    'interview_scheduled': '–ù–∞–∑–Ω–∞—á–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é',
    'voting': '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏',
    'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_ROLES = {
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'hr': 'HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
    'department_head': '–ì–ª–∞–≤–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞',
    'candidate': '–ö–∞–Ω–¥–∏–¥–∞—Ç'
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
EDUCATION_LEVELS = {
    'bachelor': '–ë–∞–∫–∞–ª–∞–≤—Ä',
    'master': '–ú–∞–≥–∏—Å—Ç—Ä',
    'phd': 'PhD/–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫'
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
EMPLOYMENT_TYPES = {
    'full': '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
    'part': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
    'guest': '–ì–æ—Å—Ç–µ–≤–∞—è'
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
WORK_FORMATS = {
    'office': '–û—á–Ω–æ',
    'online': '–û–Ω–ª–∞–π–Ω',
    'hybrid': '–ì–∏–±—Ä–∏–¥'
}

def send_email(to_email, subject, html_content, smtp_config=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_email_config()
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    if config['TESTING_MODE']:
        print(f"""
=== –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú EMAIL ===
–ö–æ–º—É: {to_email}
–¢–µ–º–∞: {subject}
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {html_content[:200]}...
=============================
        """)
        return True
    
    try:
        if not smtp_config:
            smtp_config = {
                'server': config['SMTP_SERVER'],
                'port': config['SMTP_PORT'],
                'username': config['SMTP_USERNAME'],
                'password': config['SMTP_PASSWORD'],
                'use_tls': config['SMTP_USE_TLS'],
                'from_name': config['FROM_NAME'],
                'from_email': config['FROM_EMAIL']
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not smtp_config['username'] or not smtp_config['password']:
            print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã SMTP_USERNAME –∏–ª–∏ SMTP_PASSWORD")
            return False
        
        msg = MIMEMultipart('alternative')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º from_name –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if smtp_config.get('from_name'):
            from_address = f"{Header(smtp_config['from_name'], 'utf-8').encode()} <{smtp_config.get('from_email', smtp_config['username'])}>"
        else:
            from_address = smtp_config.get('from_email', smtp_config['username'])
            
        msg['From'] = from_address
        msg['To'] = to_email
        msg['Subject'] = Header(subject, 'utf-8').encode()
        
        html_part = MIMEText(html_content, 'html', 'utf-8')
        msg.attach(html_part)
        
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É: {smtp_config['server']}:{smtp_config['port']}")
        server = smtplib.SMTP(smtp_config['server'], smtp_config['port'])
        server.set_debuglevel(1)  # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
        
        if smtp_config['use_tls']:
            server.starttls()
        
        server.login(smtp_config['username'], smtp_config['password'])
        server.send_message(msg)
        server.quit()
        
        print(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {to_email}: {e}")
        return False

def send_revision_notification(application):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏"""
    config = get_email_config()
    subject = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ - {application.vacancy.title}"
    
    # HTML —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    html_content = f"""
    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8">
            <title>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏</title>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                .header {{ background-color: #ffc107; color: #212529; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; background-color: #f8f9fa; }}
                .revision-info {{ background-color: white; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #ffc107; }}
                .edit-button {{ 
                    display: inline-block; 
                    padding: 12px 25px; 
                    background-color: #007bff; 
                    color: white; 
                    text-decoration: none; 
                    border-radius: 5px; 
                    margin: 20px 0;
                }}
                .footer {{ background-color: #6c757d; color: white; padding: 15px; text-align: center; font-size: 12px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>‚úèÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏</h2>
                    <p>HR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ê–£–≠–°</p>
                </div>
                
                <div class="content">
                    <p>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {application.candidate.full_name}!</p>
                    <p>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å <strong>"{application.vacancy.title}"</strong> —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.</p>
                    
                    <div class="revision-info">
                        <h3>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:</h3>
                        <p style="margin: 0; white-space: pre-line;">{application.revision_notes}</p>
                    </div>
                    
                    <div class="revision-info">
                        <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:</h3>
                        <ul>
                            <li><strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> {application.vacancy.title}</li>
                            <li><strong>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</strong> {application.vacancy.discipline}</li>
                            <li><strong>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:</strong> {application.vacancy.department.name}</li>
                            <li><strong>–ù–æ–º–µ—Ä –¥–æ—Ä–∞–±–æ—Ç–∫–∏:</strong> #{application.revision_count}</li>
                            <li><strong>–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:</strong> {application.revision_requested_date.strftime('%d.%m.%Y –≤ %H:%M')}</li>
                        </ul>
                    </div>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="{request.url_root}candidate/application/{application.id}/edit" class="edit-button">
                            ‚úèÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–∫–∏
                        </a>
                    </div>
                    
                    <div style="background-color: #d1ecf1; padding: 15px; border-radius: 5px; border-left: 4px solid #bee5eb;">
                        <strong>‚ÑπÔ∏è –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</strong>
                        <ul>
                            <li>–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</li>
                            <li>–í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫—É</li>
                            <li>–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</li>
                            <li>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</li>
                        </ul>
                    </div>
                </div>
                
                <div class="footer">
                    <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ê–£–≠–°</p>
                    <p>–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤</p>
                </div>
            </div>
        </body>
    </html>
    """
    
    try:
        success = send_email(application.candidate.email, subject, html_content)
        if success:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {application.candidate.email}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {application.candidate.email}")
        return success
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return False

def send_interview_invitation(application, commission_emails):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —á–ª–µ–Ω–∞–º –∫–æ–º–∏—Å—Å–∏–∏"""
    config = get_email_config()
    subject = f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é - {application.vacancy.title}"
    
    success_count = 0
    failed_emails = []
    
    for email in commission_emails:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π
            from models import CommissionVote
            vote = CommissionVote(
                application_id=application.id,
                voter_email=email.strip()
            )
            db.session.add(vote)
            db.session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            vote_url = f"{request.url_root}vote/{vote.magic_token}"
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
            html_content = f"""
            <!DOCTYPE html>
            <html>
                <head>
                    <meta charset="utf-8">
                    <title>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                        .header {{ background-color: #007bff; color: white; padding: 20px; text-align: center; }}
                        .content {{ padding: 20px; background-color: #f8f9fa; }}
                        .candidate-info {{ background-color: white; padding: 15px; margin: 15px 0; border-radius: 5px; }}
                        .vote-button {{ 
                            display: inline-block; 
                            padding: 12px 25px; 
                            background-color: #28a745; 
                            color: white; 
                            text-decoration: none; 
                            border-radius: 5px; 
                            margin: 20px 0;
                        }}
                        .footer {{ background-color: #6c757d; color: white; padding: 15px; text-align: center; font-size: 12px; }}
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h2>üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é</h2>
                            <p>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</p>
                        </div>
                        
                        <div class="content">
                            <p>–£–≤–∞–∂–∞–µ–º—ã–π —ç–∫—Å–ø–µ—Ä—Ç!</p>
                            <p>–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ü–µ–Ω–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –ê–£–≠–°.</p>
                            
                            <div class="candidate-info">
                                <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
                                <ul>
                                    <li><strong>–ö–∞–Ω–¥–∏–¥–∞—Ç:</strong> {application.candidate.full_name}</li>
                                    <li><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> {application.vacancy.title}</li>
                                    <li><strong>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</strong> {application.vacancy.discipline}</li>
                                    <li><strong>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:</strong> {application.vacancy.department.name}</li>
                                    <li><strong>–î–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:</strong> {application.interview_date.strftime('%d.%m.%Y –≤ %H:%M') if application.interview_date else '–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'}</li>
                                    {'<li><strong>–§–æ—Ä–º–∞—Ç:</strong> ' + ('–û–Ω–ª–∞–π–Ω' if application.interview_format == 'online' else '–û—á–Ω–æ') + '</li>' if application.interview_format else ''}
                                    {'<li><strong>–°—Å—ã–ª–∫–∞:</strong> <a href="' + application.interview_link + '">' + application.interview_link + '</a></li>' if application.interview_link else ''}
                                    {'<li><strong>–ê–¥—Ä–µ—Å:</strong> ' + application.interview_address + '</li>' if application.interview_address else ''}
                                </ul>
                            </div>
                            
                            <div class="candidate-info">
                                <h3>üë§ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ</h3>
                                <p><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {(application.education or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:200]}{'...' if application.education and len(application.education) > 200 else ''}</p>
                                <p><strong>–ù–∞—É—á–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å:</strong> {application.academic_degree or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                                <p><strong>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:</strong> {application.publications_count or 0}</p>
                                <p><strong>–ù–∞—É—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</strong> {application.projects_count or 0}</p>
                                {f'<p><strong>–ò–Ω–¥–µ–∫—Å –•–∏—Ä—à–∞:</strong> {application.h_index}</p>' if application.h_index else ''}
                            </div>
                
                            <div style="text-align: center; margin: 30px 0;">
                                <a href="{vote_url}" class="vote-button">
                                    üó≥Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
                                </a>
                            </div>
                            
                            <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; border-left: 4px solid #ffc107;">
                                <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong>
                                <ul>
                                    <li>–°—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è</li>
                                    <li>–ü–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π</li>
                                    <li>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="footer">
                            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ê–£–≠–°</p>
                            <p>–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤</p>
                        </div>
                    </div>
                </body>
            </html>
            """
            
            if send_email(email.strip(), subject, html_content):
                success_count += 1
                print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {email}")
            else:
                failed_emails.append(email)
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {email}")
                
        except Exception as e:
            failed_emails.append(email)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {email}: {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if config['TESTING_MODE']:
        print(f"""
=== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–ü–†–ê–í–ö–ò –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô ===
–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(commission_emails)}
–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤–∫–ª—é—á–µ–Ω
======================================
        """)
    else:
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {success_count}/{len(commission_emails)}")
        if failed_emails:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {', '.join(failed_emails)}")
    
    return success_count > 0

def allowed_file(filename, allowed_extensions={'pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'}):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions

def allowed_pdf_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è PDF"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() == 'pdf'

def save_uploaded_file(file, folder='uploads'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_')
        filename = timestamp + filename
        
        upload_folder = os.path.join(current_app.root_path, folder)
        os.makedirs(upload_folder, exist_ok=True)
        
        filepath = os.path.join(upload_folder, filename)
        file.save(filepath)
        return filename
    return None

def save_pdf_files(files, folder='uploads/documents'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤"""
    saved_files = []
    
    if not files:
        return saved_files
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω —Ñ–∞–π–ª, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    if not isinstance(files, list):
        files = [files]
    
    for file in files:
        if file and file.filename and allowed_pdf_file(file.filename):
            filename = secure_filename(file.filename)
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_')
            filename = timestamp + filename
            
            upload_folder = os.path.join(current_app.root_path, folder)
            os.makedirs(upload_folder, exist_ok=True)
            
            filepath = os.path.join(upload_folder, filename)
            file.save(filepath)
            saved_files.append(filename)
    
    return saved_files

def log_action(user_id, action, entity_type, entity_id=None, details=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    log_entry = AuditLog(
        user_id=user_id,
        action=action,
        entity_type=entity_type,
        entity_id=entity_id,
        details=details,
        ip_address=request.remote_addr if request else None
    )
    db.session.add(log_entry)
    db.session.commit()

def calculate_test_score(answers, correct_answers):
    """–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    if not answers or not correct_answers:
        return 0
    
    score = 0
    for i, answer in enumerate(answers):
        if i < len(correct_answers) and answer == correct_answers[i]:
            score += 1
    
    return score

def get_test_questions(test_type='iq'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ IQ/EQ"""
    if test_type == 'iq':
        return [
            {
                'question': '–ö–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 2, 4, 8, 16, ?',
                'options': ['24', '32', '30', '28'],
                'correct': 1
            },
            {
                'question': '–ï—Å–ª–∏ A = 1, B = 2, C = 3, —Ç–æ CAB = ?',
                'options': ['312', '321', '123', '132'],
                'correct': 0
            },
            {
                'question': '–ù–∞–π–¥–∏—Ç–µ –ª–∏—à–Ω–µ–µ: –°–æ–±–∞–∫–∞, –ö–æ—à–∫–∞, –õ–æ—à–∞–¥—å, –°—Ç–æ–ª',
                'options': ['–°–æ–±–∞–∫–∞', '–ö–æ—à–∫–∞', '–õ–æ—à–∞–¥—å', '–°—Ç–æ–ª'],
                'correct': 3
            },
            {
                'question': '–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º: –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –í—ã—Å–æ–∫–∏–π, –ó–µ–ª–µ–Ω—ã–π',
                'options': ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–ó–µ–ª–µ–Ω—ã–π'],
                'correct': 2
            },
            {
                'question': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1, 1, 2, 3, 5, 8, ?',
                'options': ['11', '13', '15', '10'],
                'correct': 1
            },
            {
                'question': '–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ 2.5 —á–∞—Å–∞—Ö?',
                'options': ['120', '150', '180', '90'],
                'correct': 1
            },
            {
                'question': '–ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∫–∞–∫–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π?',
                'options': ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥'],
                'correct': 1
            },
            {
                'question': '–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–∏—Ç—Å—è: 25% –æ—Ç 80?',
                'options': ['15', '20', '25', '30'],
                'correct': 1
            },
            {
                'question': '–ê–Ω—Ç–æ–Ω–∏–º —Å–ª–æ–≤–∞ "–≤—ã—Å–æ–∫–∏–π":',
                'options': ['–ë–æ–ª—å—à–æ–π', '–ù–∏–∑–∫–∏–π', '–®–∏—Ä–æ–∫–∏–π', '–î–ª–∏–Ω–Ω—ã–π'],
                'correct': 1
            },
            {
                'question': '–†–µ—à–∏—Ç–µ: 7 √ó 8 - 6 √ó 9 = ?',
                'options': ['2', '1', '3', '0'],
                'correct': 0
            }
        ]
    elif test_type == 'eq':
        return [
            {
                'question': '–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É?',
                'options': ['–ü—Ä–∏–Ω–∏–º–∞—é –∫ —Å–≤–µ–¥–µ–Ω–∏—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é', '–°—Ä–∞–∑—É –∑–∞—â–∏—â–∞—é—Å—å', '–ò–≥–Ω–æ—Ä–∏—Ä—É—é', '–†–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å'],
                'correct': 0
            },
            {
                'question': '–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ, –∫–æ–≥–¥–∞ –≤–∏–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–ª–µ–≥—É?',
                'options': ['–ü–æ–¥—Ö–æ–∂—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–º–æ—â—å', '–î–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –Ω–µ –∑–∞–º–µ—á–∞—é', '–ñ–¥—É, –ø–æ–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—Å—è —Å–∞–º', '–°–æ–æ–±—â–∞—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É'],
                'correct': 0
            },
            {
                'question': '–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?',
                'options': ['–ü–ª–∞–Ω–∏—Ä—É—é –∏ –æ—Ä–≥–∞–Ω–∏–∑—É—é', '–ò—â—É –ø–æ–¥–¥–µ—Ä–∂–∫—É —É –¥—Ä—É–≥–∏—Ö', '–ò–∑–±–µ–≥–∞—é —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π', '–ü–µ—Ä–µ–Ω–æ—à—É –Ω–∞ –¥—Ä—É–≥–∏—Ö'],
                'correct': 0
            },
            {
                'question': '–ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –≤—ã:',
                'options': ['–ò—â–µ—Ç–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å', '–û—Ç—Å—Ç–∞–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é', '–£—Ö–æ–¥–∏—Ç–µ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞', '–ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ —Ç—Ä–µ—Ç—å—é —Å—Ç–æ—Ä–æ–Ω—É'],
                'correct': 0
            },
            {
                'question': '–ö–∞–∫ –≤—ã –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç–µ —Å–µ–±—è –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π?',
                'options': ['–°—Ç–∞–≤–ª—é —á–µ—Ç–∫–∏–µ –ø–ª–∞–Ω—ã', '–ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–ñ–¥—É –≤–Ω–µ—à–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏', '–†–∞–±–æ—Ç–∞—é –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º'],
                'correct': 0
            },
            {
                'question': '–í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ—É–¥–∞—á—É:',
                'options': ['–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫–∏ –∏ —É—á—É—Å—å', '–†–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞–¥–æ–ª–≥–æ', '–û–±–≤–∏–Ω—è—é –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞', '–°—Ä–∞–∑—É —Å–¥–∞—é—Å—å'],
                'correct': 0
            },
            {
                'question': '–ö–∞–∫ –≤—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —ç–º–æ—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?',
                'options': ['–õ–µ–≥–∫–æ –ø–æ–Ω–∏–º–∞—é –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é', '–ó–∞–º–µ—á–∞—é, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–º–∞—é', '–†–µ–¥–∫–æ –æ–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ', '–°—á–∏—Ç–∞—é –Ω–µ–≤–∞–∂–Ω—ã–º–∏'],
                'correct': 0
            },
            {
                'question': '–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –≤—ã:',
                'options': ['–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ', '–†–∞–±–æ—Ç–∞–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', '–í—ã–ø–æ–ª–Ω—è–µ—Ç–µ –º–∏–Ω–∏–º—É–º', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º'],
                'correct': 0
            },
            {
                'question': '–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:',
                'options': ['–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã', '–î–µ–π—Å—Ç–≤—É—é –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ', '–ñ–¥—É, –ø–æ–∫–∞ —Ä–µ—à–∏—Ç—Å—è —Å–∞–º–æ', '–ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞—é –Ω–∞ –¥—Ä—É–≥–∏—Ö'],
                'correct': 0
            },
            {
                'question': '–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º?',
                'options': ['–ü—Ä–∏–Ω–∏–º–∞—é –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å', '–ù–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω–æ, –Ω–æ –ø—Ä–∏—Å–ø–æ—Å–∞–±–ª–∏–≤–∞—é—Å—å', '–°–æ–ø—Ä–æ—Ç–∏–≤–ª—è—é—Å—å', '–ò–∑–±–µ–≥–∞—é'],
                'correct': 0
            }
        ]
    
    return []

def format_json_field(json_string, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç"""
    if not json_string:
        return default or {}
    try:
        return json.loads(json_string)
    except (json.JSONDecodeError, TypeError):
        return default or {}

def get_file_list_from_json(json_string):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏"""
    if not json_string:
        return []
    try:
        result = json.loads(json_string)
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if isinstance(result, list):
            return result
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        elif isinstance(result, dict):
            return []
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Ç–æ–∂–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        else:
            return []
    except (json.JSONDecodeError, TypeError):
        return []

def format_date(date_obj, format_str='%d.%m.%Y'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    if not date_obj:
        return ''
    return date_obj.strftime(format_str)

def format_datetime(datetime_obj, format_str='%d.%m.%Y %H:%M'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not datetime_obj:
        return ''
    return datetime_obj.strftime(format_str)

def moment():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
    return datetime.utcnow()

def calculate_age(birth_date):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not birth_date:
        return None
    today = datetime.utcnow().date()
    return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

def get_status_badge_class(status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    status_classes = {
        'pending': 'bg-secondary text-white',
        'hr_review': 'bg-info text-white',
        'revision_requested': 'bg-warning text-dark',
        'dept_review': 'bg-warning text-dark',
        'interview_scheduled': 'bg-primary text-white',
        'voting': 'bg-info text-white',
        'approved': 'bg-success text-white',
        'rejected': 'bg-danger text-white'
    }
    return status_classes.get(status, 'bg-secondary text-white')

def export_applications_to_excel(applications):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ Excel"""
    try:
        import pandas as pd
        from models import TestResult
        
        data = []
        for app in applications:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            test_results = TestResult.query.filter_by(application_id=app.id).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
            test_results_str = ""
            if test_results:
                results_list = []
                for result in test_results:
                    test_name = result.test.name if result.test else f"–¢–µ—Å—Ç ID {result.test_id}"
                    results_list.append(f"{test_name}: {result.score}/{result.max_score}")
                test_results_str = "; ".join(results_list)
            else:
                test_results_str = "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
            
            data.append({
                'ID': app.id,
                '–ö–∞–Ω–¥–∏–¥–∞—Ç': app.candidate.full_name,
                '–í–∞–∫–∞–Ω—Å–∏—è': app.vacancy.title,
                '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç': app.vacancy.department.name,
                '–°—Ç–∞—Ç—É—Å': APPLICATION_STATUSES.get(app.status, app.status),
                '–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏': format_datetime(app.created_at),
                '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤': test_results_str,
                '–†–µ—à–µ–Ω–∏–µ HR': app.hr_decision or '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ',
                '–†–µ—à–µ–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞': app.dept_decision or '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ',
                '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ': app.final_decision or '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ'
            })
        
        df = pd.DataFrame(data)
        return df
    except ImportError:
        return None

def validate_magic_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"""
    from models import CommissionVote
    
    vote = CommissionVote.query.filter_by(magic_token=token, token_used=False).first()
    return vote 

def get_test_questions_count(test):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ"""
    if not test or not test.questions:
        return 0
    try:
        questions = json.loads(test.questions)
        return len(questions) if isinstance(questions, list) else 0
    except (json.JSONDecodeError, TypeError):
        return 0

def is_test_required_for_vacancy(test, vacancy):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    return test in vacancy.required_tests

def get_all_required_tests_for_vacancy(vacancy):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    return list(vacancy.required_tests)

def check_all_tests_completed_for_application(application):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–π–¥–µ–Ω—ã –ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏"""
    from models import TestResult
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã
    required_tests = application.vacancy.required_tests
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    for test in required_tests:
        result = TestResult.query.filter_by(
            application_id=application.id,
            test_id=test.id
        ).first()
        if not result:
            return False
    
    return True

def get_test_results_for_application(application):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    from models import TestResult
    
    return TestResult.query.filter_by(application_id=application.id).all()

def get_test_result_by_test_id(application, test_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    from models import TestResult
    
    return TestResult.query.filter_by(
        application_id=application.id,
        test_id=test_id
    ).first() 